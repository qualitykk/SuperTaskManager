// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using STaskManagerLibrary;

namespace STaskManagerUserService
{
    public partial class TaskManagerContext : DbContext
    {
        public TaskManagerContext()
        {
        }

        public TaskManagerContext(DbContextOptions<TaskManagerContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Account> Account { get; set; }
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<STask> Task { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseNpgsql("Server=127.0.0.1;Port=5432;Database=super_task_manager;User Id=admin;Password=admin;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Account>(entity =>
            {
                entity.HasKey(e => e.Uid)
                    .HasName("account_pkey");

                entity.ToTable("account");

                entity.Property(e => e.Uid)
                    .ValueGeneratedNever()
                    .HasColumnName("uid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(32)
                    .HasColumnName("name");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(512)
                    .HasColumnName("password");
            });

            modelBuilder.Entity<Category>(entity =>
            {
                entity.HasKey(e => e.Cid)
                    .HasName("category_pkey");

                entity.ToTable("category");

                entity.Property(e => e.Cid)
                    .ValueGeneratedNever()
                    .HasColumnName("cid");

                entity.Property(e => e.Colour)
                    .HasMaxLength(7)
                    .HasColumnName("colour");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(32)
                    .HasColumnName("title");
            });

            modelBuilder.Entity<STask>(entity =>
            {
                entity.HasKey(e => e.Tid)
                    .HasName("task_pkey");

                entity.ToTable("task");

                entity.Property(e => e.Tid)
                    .ValueGeneratedNever()
                    .HasColumnName("tid");

                entity.Property(e => e.Account).HasColumnName("account");

                entity.Property(e => e.Belongsto).HasColumnName("belongsto");

                entity.Property(e => e.Description)
                    .HasMaxLength(512)
                    .HasColumnName("description");

                entity.Property(e => e.Duedate).HasColumnName("duedate");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(32)
                    .HasColumnName("name");

                entity.Property(e => e.Priority).HasColumnName("priority");

                entity.HasOne(d => d.AccountNavigation)
                    .WithMany(p => p.Task)
                    .HasForeignKey(d => d.Account)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("task_account_fkey");

                entity.HasOne(d => d.BelongstoNavigation)
                    .WithMany(p => p.Task)
                    .HasForeignKey(d => d.Belongsto)
                    .HasConstraintName("task_belongsto_fkey");

                entity.HasMany(d => d.Required)
                    .WithMany(p => p.TaskNavigation)
                    .UsingEntity<Dictionary<string, object>>(
                        "TaskRequires",
                        l => l.HasOne<STask>().WithMany().HasForeignKey("Required").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("task_requires_required_fkey"),
                        r => r.HasOne<STask>().WithMany().HasForeignKey("Task").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("task_requires_task_fkey"),
                        j =>
                        {
                            j.HasKey("Task", "Required").HasName("task_requires_pkey");

                            j.ToTable("task_requires");

                            j.IndexerProperty<int>("Task").HasColumnName("task");

                            j.IndexerProperty<int>("Required").HasColumnName("required");
                        });

                entity.HasMany(d => d.TaskNavigation)
                    .WithMany(p => p.Required)
                    .UsingEntity<Dictionary<string, object>>(
                        "TaskRequires",
                        l => l.HasOne<STask>().WithMany().HasForeignKey("Task").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("task_requires_task_fkey"),
                        r => r.HasOne<STask>().WithMany().HasForeignKey("Required").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("task_requires_required_fkey"),
                        j =>
                        {
                            j.HasKey("Task", "Required").HasName("task_requires_pkey");

                            j.ToTable("task_requires");

                            j.IndexerProperty<int>("Task").HasColumnName("task");

                            j.IndexerProperty<int>("Required").HasColumnName("required");
                        });
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}